{

    // All options in here can also be specified in your project settings
    // with a prepended "sublimeclang_" for example if you have
    //
    // "settings":
    // {
    //     "sublimeclang_show_visual_error_marks": false
    // }
    //
    // in your project settings, this will override the settings specified
    // in this file and in your user settings.


    // Whether or not the plugin is enabled. Useful if you want to disable
    // the plugin completely for a specific project.
    "enabled": true,

    // Delay in ms until autocompletion pops up after . or :: or ->
    // Set to 0 to disable
    "popup_delay": 100,

    // Delay in ms until recompiling the file after the buffer is modified
    // Set to 0 to disable
    "recompile_delay": 0,

    // Whether or not to hide the clang output panel when it's empty
    "hide_output_when_empty": false,

    // Whether or not to automatically show the output panel.
    // If set to false, the default key-binding ctrl+d,ctrl+p
    // will show it
    "show_output_panel": true,

    // Whether or not to show the clang parser status in the status bar
    "show_status": true,

    // When set to true, will display visual error markers. recompile_delay
    // must be set to > 0
    "show_visual_error_marks": true,

    // This is the bitmask sent to index.parse.
    // For example, to be able to go to the definition of
    // preprocessed macros, set it to 1, for using an implicit
    // precompiled header set it to 4 and for caching completion
    // results, set it to 8. Or all together 1+4+8=13.
    //
    // See http://clang.llvm.org/doxygen/group__CINDEX__TRANSLATION__UNIT.html#gab1e4965c1ebe8e41d71e90203a723fe9
    // and http://clang.llvm.org/doxygen/Index_8h_source.html
    // for more details
    "index_parse_options": 13,

    // If set to false, the main thread will lock while parsing
    // the file, but commands will work the first time they are
    // executed rather than the first time after warm up has
    // finished
    "warm_up_in_separate_thread": true,

    // If set to true will warm up the cache for supported files
    // when they are opened
    "cache_on_load": true,

    // If set to true will remove the file from the cache when
    // it is closed
    "remove_on_close": true,

    // If set to true will pop the file from the navigation stack
    // (automatic ctrl+d,ctrl+b) when the file is closed
    "pop_on_close": true,

    // When set to true a reparse command will be triggered
    // when a view is activated
    "reparse_on_activated": true,

    // When set to true a reparse command will be triggered
    // when a view is saved
    "reparse_on_save": true,

    // When set to true will display parse status messages
    "parse_status_messages": true,

    // When set to true will display analyzer status messages
    "analyzer_status_messages": true,

    // Scope used for markers in the clang output panel
    "marker_output_panel_scope": "invalid",

    // Scope used for warning markers
    "marker_warning_scope": "comment",

    // Scope used for error markers
    "marker_error_scope": "invalid",

    // Whether or not to print out timing information for the complete operation
    "time_completions": false,

    // Whether or not to inhibit the Sublime Text 2 built in word completions
    "inhibit_sublime_completions": true,

    // Don't show stuff in the autocomplete list when the name starts with the following
    "dont_complete_startswith":
    [
        "~",
        "operator"
    ],

    // If set to true it'll add for example "-x c++" to the options for c++ files
    "add_language_option": true,

    // Addtional language specific options for clang.
    // This option only works when "add_language_option" is set to true.
    "additional_language_options":
    {
        // For example, you can use "c++": ["-std=c++11"] to enable C++11 features.
        "c++" : [],
        "c": [],
        "objc": [],
        "objc++": []
    },

    // Any options you want to give to clang
    // This can also be specified as project specific options. Choose the menu item
    // Project->Edit Project, and then add something like the following to the
    // "settings" section:
    //
    //     "sublimeclang_options":
    //     [
    //         "-I/project/specific/path/1",
    //         "-I/project/specific/path/2"
    //     ]
    //
    // If your project does not have a settings section it would look like this:
    //
    // "settings":
    // {
    //     "sublimeclang_options":
    //     [
    //         "-I/project/specific/path/1",
    //         "-I/project/specific/path/2"
    //     ]
    // }
    //
    // If "sublimeclang_options" exists in your project settings, it'll override
    // rather than add to the "options" defined in SublimeClang.sublime-settings.
    //
    // Note that the project settings aren't applied for already cached files,
    // so to make them take effect you'll have to clear the cache first. The
    // default keybinding for clearing the cache is alt+d,alt+c.
    //
    // ${home}, ${project_path:} and ${folder:} tokens can be used in these options.
    //
    // ${home} is replaced with the value of the HOME environment variable.
    //
    // ${project_path:} tries to find a file with the given name in all the registered project folders and
    // returns the first file found, or the original file name if none is found.
    // Example: ${project_path:main.cpp} tries to find a file named "main.cpp" relative
    // to the current project's folders. If none is found, it is replaced with "main.cpp".
    //
    // ${folder:} is replaced with the dirname of the given path.
    // Example: ${folder:/path/to/file} is replaced with "/path/to".
    //
    // Replacement is done sequencially, first all ${home} tokens, then all ${project_path:} are resolved, and then the
    // ${folder:} are replaced.
    //
    // So for example, you might specify:
    //       "-I${folder:${project_path:main.cpp}}",
    //       "-I${folder:${project_path:main.cpp}}/includepath",
    //       "-I${folder:${project_path:main.cpp}}/anotherincludepath"
    //
    // And it will expand into:
    //       "-I<path of the project folder containing main.cpp>",
    //       "-I<path of the project folder containing main.cpp>/includepath",
    //       "-I<path of the project folder containing main.cpp>/anotherincludepath"
    //
    //
    //
    // You can also add an '*' or '**' to the end of a path.
    //   '*'    will include all the subdirectories (non-recursive) of that path (not including the given path)
    //   '**'   will expand to include all subdirectories recursively (not including the given path)
    //
    // Both with ignore any directories that begin with '.', but you can still specify those manually
    //
    //
    // For example, imagine we had a directory structure like so:
    //
    //  myproject/myproject.sublime-project
    //  myproject/src
    //  myproject/src/.hidden-dir
    //  myproject/src/ModuleA
    //  myproject/src/ModuleB
    //  myproject/src/ModuleC/SubmoduleC-A
    //  myproject/src/ModuleC/SubmoduleC-B
    //  myproject/includes
    //  myproject/includes/something
    //  myproject/includes/somethingelse
    //  myproject/includes/morethings
    //  myproject/includes/evenmorethings/asdf
    //
    //
    //  an option like this:
    //    "-I${folder:${project_path:myproject.sublime-project}}/src/**",
    //
    //  will expand to:
    //    "-I/path/to/myproject/src/ModuleA",
    //    "-I/path/to/myproject/src/ModuleB",
    //    "-I/path/to/myproject/src/ModuleC/SubmoduleC-A",
    //    "-I/path/to/myproject/src/ModuleC/SubmoduleC-B",
    //
    //  Note that src and .hidden-dir were skipped
    //
    //
    //  an option like this:
    //    "-I${folder:${project_path:myproject.sublime-project}}/includes/*",
    //  will expand to:
    //    "-I/path/to/myproject/includes/something",
    //    "-I/path/to/myproject/includes/somethingelse",
    //    "-I/path/to/myproject/includes/morethings",
    //    "-I/path/to/myproject/includes/evenmorethings",
    //
    //  Notice that the both the myproject/includes directory and any directories more than one level deep are skipped
    //
    // Set "debug_options" (defined below) to true to print the final options used for compilation to the python console
    "options":
    [
        "-Wall",
        "-I/usr/lib/clang/3.0/include/",
        "-I/usr/lib/clang/2.1/include/",
        "-I/usr/lib/gcc/i686-apple-darwin10/4.2.1/include/",
        "-I/usr/lib/gcc/i686-apple-darwin11/4.2.1/include/",
        // If you code for iOS, you want to have something like the following here:
        //"-isysroot",
        //"/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator4.3.sdk",
        //"-D__IPHONE_OS_VERSION_MIN_REQUIRED=40300",
        "-IC:/MinGW/include",
        "-I/path/to/sources/1",
        "-I/path/to/sources/2"
    ],

    // When set to true will output the final options used to the python console
    "debug_options": false,

    // Scope used for markers in the clang output panel
    "marker_analyzer_output_panel_scope": "invalid",

    // Scope used for markers by the analyzer in the file views
    "marker_analyzer_scope": "invalid",

    // Commandline used to invoke the static analyzer.
    // "options" will be appended to this
    "analyzer_commandline":
    [
        "clang",
        "--analyze",
        "-o",
        "-"
    ],

    // Extensions to be scanned by the static analyzer
    // when analyzing a project
    "analyzer_extensions":
    [
        "cpp",
        "c",
        "cc",
        "m",
        "mm"
    ]

}
